df.gsa <- read.csv("data/vfdb/virbd.blast.out", sep = "\t", header = F)[c(1,2)]
df.vf
df.vf.s <- spread(df.vf[-c(4018, 4015),], name, rpkm, fill = 0)
df.vf.s <- df.vf.s[df.vf.s$sample %in% c(Point_1, Point_2),]
rownames(df.vf.s) <- df.vf.s$sample
df.vf.s <- df.vf.s[-1]
df.vf.s
write.table(t(df.vf.s), "df.vf.s.tsv", quote = F)
KoData <- df.vf.s
gr1 <- Point_2
gr2 <- Point_1
pval_gen <- c()
lfc <- c()
for (i in colnames(KoData))
{
w1<-wilcox.test(as.matrix(KoData[gr1,i]), as.matrix(KoData[gr2,i]), alternative='less', paired = T)
w2<-wilcox.test(as.matrix(KoData[gr1,i]), as.matrix(KoData[gr2,i]), alternative='greater', paired = T)
# stub for NA p-values
if(is.na(w1$p.value) || is.na(w2$p.value))
{
if (is.na(w1$p.value) && !is.na(w2$p.value)) {
pval_gen<-append(pval_gen, w2$p.value)
lfc<-append(lfc, -1)
}
if (is.na(w2$p.value) && !is.na(w1$p.value)) {
pval_gen<-append(pval_gen, w1$p.value)
lfc<-append(lfc, 1)
}
if (is.na(w2$p.value) && is.na(w1$p.value)) {
pval_gen<-append(pval_gen, 1)
lfc<-append(lfc, 0)
}
}
else # detect direction of change
{
if(w1$p.value < w2$p.value)
{
lfc<-append(lfc, 1)
pval_gen<-append(pval_gen, w1$p.value)
}
else
{
lfc<-append(lfc, -1)
pval_gen<-append(pval_gen,  w2$p.value)
}
}
}
pval <- pval_gen
pval_gen <- p.adjust(pval, method='fdr')
names(pval) <- colnames(KoData)
names(lfc) <- colnames(KoData)
pval_ap<-append(pval, rep(1,length(unique(kegg_parsed_inv[-which(kegg_parsed_inv[,1] %in% names(pval)),1]))))
names(pval_ap)<-append(names(pval), as.vector(unique(kegg_parsed_inv[-which(kegg_parsed_inv[,1] %in% names(pval)),1])))
lfc_ap<-append(lfc, rep(0,length(unique(kegg_parsed_inv[-which(kegg_parsed_inv[,1] %in% names(lfc)),1]))))
names(lfc_ap)<-append(names(lfc), as.vector(unique(kegg_parsed_inv[-which(kegg_parsed_inv[,1] %in% names(lfc)),1])))
myPval <- pval
names(myPval) <- gsub("\\.", "\\|", names(myPval))
myFC <- lfc
names(myFC) <- names(myPval)
myFC
myPval
df.gsa
df.gsa <- loadGSC(df.gsa)
df.gsa
gsaRes <- runGSA(myPval, myFC, gsc=df.gsa, adjMethod = "fdr",
geneSetStat="reporter",
signifMethod="geneSampling",
nPerm=21000)
lol <- GSAsummaryTable(gsaRes)
lol <- lol[c(1,5,8)]
lol_dn <- lol[lol$`p adj (dist.dir.up)` < 0.05,]
lol_up <- lol[lol$`p adj (dist.dir.dn)` < 0.05,]
vfdb <- readDNAStringSet("data/vfdb/VFDB_setB_nt.fas")
nm <-  sapply(strsplit(names(vfdb), " "), function(x) head(x, 1))
descrip <- sapply(sapply(strsplit(names(vfdb), " "), function(x) x[-1]), function(x) paste(x, collapse = " "))
merge(data.frame(nm, descrip), lol_dn, by = 1)
merge(data.frame(nm, descrip), lol_up, by = 1)
lol <- GSAsummaryTable(gsaRes)
lol <- lol[c(1,5,8)]
lol_dn <- lol[lol$`p adj (dist.dir.up)` < 0.05,]
lol_up <- lol[lol$`p adj (dist.dir.dn)` < 0.05,]
vfdb <- readDNAStringSet("data/vfdb/VFDB_setB_nt.fas")
library(Biostrings)
library(Biostrings)
vfdb <- readDNAStringSet("data/vfdb/VFDB_setB_nt.fas")
lol_dn
lol_up
gsaRes <- runGSA(myPval, myFC, gsc=df.gsa, adjMethod = "fdr",
geneSetStat="reporter",
signifMethod="geneSampling",
nPerm=21000)
lol <- GSAsummaryTable(gsaRes)
lol <- lol[c(1,5,8)]
lol_dn <- lol[lol$`p adj (dist.dir.up)` < 0.05,]
lol_up <- lol[lol$`p adj (dist.dir.dn)` < 0.05,]
lol_up
lol_dn
lol <- GSAsummaryTable(gsaRes)
lol <- lol[c(1,5,8)]
lol_dn <- lol[lol$`p adj (dist.dir.up)` < 0.05,]
lol_up <- lol[lol$`p adj (dist.dir.dn)` < 0.05,]
gsaRes <- runGSA(myPval, myFC, gsc=df.gsa, adjMethod = "fdr",
geneSetStat="reporter",
signifMethod="geneSampling",
nPerm=21000)
lol <- GSAsummaryTable(gsaRes)
lol <- lol[c(1,5,8)]
lol_dn <- lol[lol$`p adj (dist.dir.up)` < 0.05,]
lol_up <- lol[lol$`p adj (dist.dir.dn)` < 0.05,]
lol_dn
lol_up
lol
lol_dn <- lol[lol$`p adj (dist.dir.up)` < 0.05,]
lol_up <- lol[lol$`p adj (dist.dir.dn)` < 0.05,]
lol_dn <- lol[lol$`p adj (dist.dir.up)` < 0.05,]
lol_up <- lol[lol$`p adj (dist.dir.dn)` < 0.05,]
lol_dn
gsaRes <- runGSA(myPval, myFC, gsc=df.gsa, adjMethod = "fdr",
geneSetStat="reporter",
signifMethod="geneSampling",
nPerm=21000)
lol <- GSAsummaryTable(gsaRes)
lol <- lol[c(1,5,8)]
lol_dn <- lol[lol$`p adj (dist.dir.up)` < 0.05,]
lol_up <- lol[lol$`p adj (dist.dir.dn)` < 0.05,]
lol_up
lol_dn
KoData <- df.vf.s
gr1 <- Point_2
gr2 <- Point_1
pval_gen <- c()
lfc <- c()
for (i in colnames(KoData))
{
w1<-wilcox.test(as.matrix(KoData[gr1,i]), as.matrix(KoData[gr2,i]), alternative='less', paired = T)
w2<-wilcox.test(as.matrix(KoData[gr1,i]), as.matrix(KoData[gr2,i]), alternative='greater', paired = T)
# stub for NA p-values
if(is.na(w1$p.value) || is.na(w2$p.value))
{
if (is.na(w1$p.value) && !is.na(w2$p.value)) {
pval_gen<-append(pval_gen, w2$p.value)
lfc<-append(lfc, -1)
}
if (is.na(w2$p.value) && !is.na(w1$p.value)) {
pval_gen<-append(pval_gen, w1$p.value)
lfc<-append(lfc, 1)
}
if (is.na(w2$p.value) && is.na(w1$p.value)) {
pval_gen<-append(pval_gen, 1)
lfc<-append(lfc, 0)
}
}
else # detect direction of change
{
if(w1$p.value < w2$p.value)
{
lfc<-append(lfc, 1)
pval_gen<-append(pval_gen, w1$p.value)
}
else
{
lfc<-append(lfc, -1)
pval_gen<-append(pval_gen,  w2$p.value)
}
}
}
pval <- pval_gen
names(pval) <- colnames(KoData)
names(lfc) <- colnames(KoData)
# pval_ap<-append(pval, rep(1,length(unique(kegg_parsed_inv[-which(kegg_parsed_inv[,1] %in% names(pval)),1]))))
# names(pval_ap)<-append(names(pval), as.vector(unique(kegg_parsed_inv[-which(kegg_parsed_inv[,1] %in% names(pval)),1])))
# lfc_ap<-append(lfc, rep(0,length(unique(kegg_parsed_inv[-which(kegg_parsed_inv[,1] %in% names(lfc)),1]))))
# names(lfc_ap)<-append(names(lfc), as.vector(unique(kegg_parsed_inv[-which(kegg_parsed_inv[,1] %in% names(lfc)),1])))
myPval <- pval
names(myPval) <- gsub("\\.", "\\|", names(myPval))
myFC <- lfc
names(myFC) <- names(myPval)
#run Reporter Feature Algorythm from piano package
gsaRes <- runGSA(myPval, myFC, gsc=df.gsa, adjMethod = "fdr",
geneSetStat="reporter",
signifMethod="geneSampling",
nPerm=21000)
lol <- GSAsummaryTable(gsaRes)
lol <- lol[c(1,5,8)]
lol
lol_dn <- lol[lol$`p adj (dist.dir.up)` < 0.05,]
lol_up <- lol[lol$`p adj (dist.dir.dn)` < 0.05,]
lol_dn
lol_up
df.vf <- read.csv("data/vfdb/virdb.rpkm.txt", sep = " ")
df.vf <- df.vf[df.vf$rpkm != 0,]
df.gsa <- read.csv("data/vfdb/virbd.blast.out", sep = "\t", header = F)[c(1,2)]
df.gsa <- loadGSC(df.gsa)
df.vf.s <- spread(df.vf[-c(4018, 4015),], name, rpkm, fill = 0)
df.vf.s <- df.vf.s[df.vf.s$sample %in% c(Point_1, Point_2),]
rownames(df.vf.s) <- df.vf.s$sample
df.vf.s <- df.vf.s[-1]
KoData <- df.vf.s
gr1 <- Point_2
gr2 <- Point_1
pval_gen <- c()
lfc <- c()
for (i in colnames(KoData))
{
w1<-wilcox.test(as.matrix(KoData[gr1,i]), as.matrix(KoData[gr2,i]), alternative='less', paired = T)
w2<-wilcox.test(as.matrix(KoData[gr1,i]), as.matrix(KoData[gr2,i]), alternative='greater', paired = T)
# stub for NA p-values
if(is.na(w1$p.value) || is.na(w2$p.value))
{
if (is.na(w1$p.value) && !is.na(w2$p.value)) {
pval_gen<-append(pval_gen, w2$p.value)
lfc<-append(lfc, -1)
}
if (is.na(w2$p.value) && !is.na(w1$p.value)) {
pval_gen<-append(pval_gen, w1$p.value)
lfc<-append(lfc, 1)
}
if (is.na(w2$p.value) && is.na(w1$p.value)) {
pval_gen<-append(pval_gen, 1)
lfc<-append(lfc, 0)
}
}
else # detect direction of change
{
if(w1$p.value < w2$p.value)
{
lfc<-append(lfc, 1)
pval_gen<-append(pval_gen, w1$p.value)
}
else
{
lfc<-append(lfc, -1)
pval_gen<-append(pval_gen,  w2$p.value)
}
}
}
pval <- pval_gen
# pval_gen <- p.adjust(pval, method='fdr')
names(pval) <- colnames(KoData)
names(lfc) <- colnames(KoData)
# pval_ap<-append(pval, rep(1,length(unique(kegg_parsed_inv[-which(kegg_parsed_inv[,1] %in% names(pval)),1]))))
# names(pval_ap)<-append(names(pval), as.vector(unique(kegg_parsed_inv[-which(kegg_parsed_inv[,1] %in% names(pval)),1])))
# lfc_ap<-append(lfc, rep(0,length(unique(kegg_parsed_inv[-which(kegg_parsed_inv[,1] %in% names(lfc)),1]))))
# names(lfc_ap)<-append(names(lfc), as.vector(unique(kegg_parsed_inv[-which(kegg_parsed_inv[,1] %in% names(lfc)),1])))
myPval <- pval
names(myPval) <- gsub("\\.", "\\|", names(myPval))
myFC <- lfc
names(myFC) <- names(myPval)
gsaRes <- runGSA(myPval, myFC, gsc=df.gsa, adjMethod = "fdr",
geneSetStat="reporter",
signifMethod="geneSampling",
nPerm=21000)
lol <- GSAsummaryTable(gsaRes)
lol <- lol[c(1,5,8)]
lol_dn <- lol[lol$`p adj (dist.dir.up)` < 0.05,]
lol_up <- lol[lol$`p adj (dist.dir.dn)` < 0.05,]
lol_dn
lol_up
lol
df.vf <- read.csv("data/bacmet/bacmet.rpkm.txt", sep = " ", stringsAsFactors = F)
df.vf <- df.vf[df.vf$rpkm !=0,]
df.gsa <- read.csv("data/bacmet/bacmet.dmd.out", sep = "\t", header = F)[c(1,2)]
df.gsa <- loadGSC(df.gsa)
df.vf <- df.vf[duplicated(df.vf$name), ]
df.vf.s <- spread(df.vf[-c(6178, 6175, 6179, 6184, 6187),], name, rpkm)
df.vf.s <- df.vf.s[df.vf.s$sample %in% c(Point_1, Point_2),]
rownames(df.vf.s) <- df.vf.s$sample
df.vf.s <- df.vf.s[-1]
df.vf.s[is.na(df.vf.s)] <- 0
df.vf.s
df.vf.s
df.vf <- read.csv("data/bacmet/bacmet.rpkm.txt", sep = " ", stringsAsFactors = F)
df.vf <- df.vf[df.vf$rpkm !=0,]
df.gsa <- read.csv("data/bacmet/bacmet.dmd.out", sep = "\t", header = F)[c(1,2)]
df.gsa <- loadGSC(df.gsa)
df.vf <- df.vf[duplicated(df.vf$name), ]
df.vf.s <- spread(df.vf[-c(6178, 6175, 6179, 6184, 6187),], name, rpkm)
df.vf.s <- df.vf.s[df.vf.s$sample %in% c(Point_1, Point_2),]
rownames(df.vf.s) <- df.vf.s$sample
df.vf.s <- df.vf.s[-1]
df.vf.s[is.na(df.vf.s)] <- 0
df.gsa
write.table(t(df.vf.s), "df.vf.s", quote = F)
KoData <- df.vf.s
gr1 <- Point_2
gr2 <- Point_1
pval_gen <- c()
lfc <- c()
for (i in colnames(KoData))
{
w1<-wilcox.test(as.matrix(KoData[gr1,i]), as.matrix(KoData[gr2,i]), alternative='less', paired = T)
w2<-wilcox.test(as.matrix(KoData[gr1,i]), as.matrix(KoData[gr2,i]), alternative='greater', paired = T)
# stub for NA p-values
if(is.na(w1$p.value) || is.na(w2$p.value))
{
if (is.na(w1$p.value) && !is.na(w2$p.value)) {
pval_gen<-append(pval_gen, w2$p.value)
lfc<-append(lfc, -1)
}
if (is.na(w2$p.value) && !is.na(w1$p.value)) {
pval_gen<-append(pval_gen, w1$p.value)
lfc<-append(lfc, 1)
}
if (is.na(w2$p.value) && is.na(w1$p.value)) {
pval_gen<-append(pval_gen, 1)
lfc<-append(lfc, 0)
}
}
else # detect direction of change
{
if(w1$p.value < w2$p.value)
{
lfc<-append(lfc, 1)
pval_gen<-append(pval_gen, w1$p.value)
}
else
{
lfc<-append(lfc, -1)
pval_gen<-append(pval_gen,  w2$p.value)
}
}
}
pval <- pval_gen
pval_gen <- p.adjust(pval, method='fdr')
names(pval) <- colnames(KoData)
names(lfc) <- colnames(KoData)
myPval <- pval
myFC <- lfc
gsaRes <- runGSA(myPval, myFC, gsc=df.gsa, adjMethod = "fdr",
geneSetStat="reporter",
signifMethod="geneSampling",
nPerm=21000)
lol <- GSAsummaryTable(gsaRes)
lol <- lol[c(1,5,8)]
lol[lol$`p adj (dist.dir.up)` < 0.05,]
lol[lol$`p adj (dist.dir.dn)` < 0.05,]
lol
lol
lol
lol
lol <- GSAsummaryTable(gsaRes)
lol <- lol[c(1,5,8)]
lol[lol$`p adj (dist.dir.up)` < 0.05,]
lol[lol$`p adj (dist.dir.dn)` < 0.05,]
lol[lol$`p adj (dist.dir.up)` < 0.05,]
write.table(lol[lol$`p adj (dist.dir.up)` < 0.05,], "lol.tsv", quote = F)
lol[lol$`p adj (dist.dir.up)` < 0.05,][2,]
lol[lol$`p adj (dist.dir.up)` < 0.05,][,2]
mean(lol[lol$`p adj (dist.dir.up)` < 0.05,][,2])
df.vf <- read.csv("data/bacmet/bacmet.rpkm.txt", sep = " ", stringsAsFactors = F)
df.vf <- df.vf[df.vf$rpkm !=0,]
df.gsa <- read.csv("data/bacmet/bacmet.dmd.out", sep = "\t", header = F)[c(1,2)]
df.gsa
str_split(df.gsa$V2, :\\|)
str_split(df.gsa$V2, "\\|")
sapply(str_split(df.gsa$V2, "\\|"), function(x) x[2])
df.gsa$V2 <- sapply(str_split(df.gsa$V2, "\\|"), function(x) x[2])
df.gsa <- loadGSC(df.gsa)
df.gsa
df.vf <- df.vf[duplicated(df.vf$name), ]
df.vf.s <- spread(df.vf[-c(6178, 6175, 6179, 6184, 6187),], name, rpkm)
df.vf.s <- df.vf.s[df.vf.s$sample %in% c(Point_1, Point_2),]
rownames(df.vf.s) <- df.vf.s$sample
df.vf.s <- df.vf.s[-1]
df.vf.s[is.na(df.vf.s)] <- 0
KoData <- df.vf.s
gr1 <- Point_2
gr2 <- Point_1
pval_gen <- c()
lfc <- c()
for (i in colnames(KoData))
{
w1<-wilcox.test(as.matrix(KoData[gr1,i]), as.matrix(KoData[gr2,i]), alternative='less', paired = T)
w2<-wilcox.test(as.matrix(KoData[gr1,i]), as.matrix(KoData[gr2,i]), alternative='greater', paired = T)
# stub for NA p-values
if(is.na(w1$p.value) || is.na(w2$p.value))
{
if (is.na(w1$p.value) && !is.na(w2$p.value)) {
pval_gen<-append(pval_gen, w2$p.value)
lfc<-append(lfc, -1)
}
if (is.na(w2$p.value) && !is.na(w1$p.value)) {
pval_gen<-append(pval_gen, w1$p.value)
lfc<-append(lfc, 1)
}
if (is.na(w2$p.value) && is.na(w1$p.value)) {
pval_gen<-append(pval_gen, 1)
lfc<-append(lfc, 0)
}
}
else # detect direction of change
{
if(w1$p.value < w2$p.value)
{
lfc<-append(lfc, 1)
pval_gen<-append(pval_gen, w1$p.value)
}
else
{
lfc<-append(lfc, -1)
pval_gen<-append(pval_gen,  w2$p.value)
}
}
}
pval <- pval_gen
pval_gen <- p.adjust(pval, method='fdr')
names(pval) <- colnames(KoData)
names(lfc) <- colnames(KoData)
# pval_ap<-append(pval, rep(1,length(unique(kegg_parsed_inv[-which(kegg_parsed_inv[,1] %in% names(pval)),1]))))
# names(pval_ap)<-append(names(pval), as.vector(unique(kegg_parsed_inv[-which(kegg_parsed_inv[,1] %in% names(pval)),1])))
# lfc_ap<-append(lfc, rep(0,length(unique(kegg_parsed_inv[-which(kegg_parsed_inv[,1] %in% names(lfc)),1]))))
# names(lfc_ap)<-append(names(lfc), as.vector(unique(kegg_parsed_inv[-which(kegg_parsed_inv[,1] %in% names(lfc)),1])))
myPval <- pval
myFC <- lfc
#run Reporter Feature Algorythm from piano package
gsaRes <- runGSA(myPval, myFC, gsc=df.gsa, adjMethod = "fdr",
geneSetStat="reporter",
signifMethod="geneSampling",
nPerm=21000)
lol <- GSAsummaryTable(gsaRes)
lol[lol$`p adj (dist.dir.up)` < 0.05,]
lol[lol$`p adj (dist.dir.dn)` < 0.05,]
lol
lol <- lol[c(1,5,8)]
lol
lol[lol$`p adj (dist.dir.up)` < 0.05,]
lol[lol$`p adj (dist.dir.dn)` < 0.05,]
lol
healthy.org
healthy.fam
workDir <- "/home/acari/Рабочий стол/HP_project/"
setwd(workDir)
# Import libraries and functions ##
source("src/functions.R")
source("src/functions_2.R")
source("src/functions_3.R")
set.seed(10)
# Set color pallete ##
my_palette <- colorRampPalette(rev(brewer.pal(11,"Spectral")))(200)
##############################################################################################################################################################
## 1. Import datasets ########################################################################################################################################
##############################################################################################################################################################
# Import metadata ##
meta.data <- read.csv("data/meta_case.csv")
# Extract first and second time points sampleID ##
samples <- as.character(meta.data$Patient_ID[meta.data$Time.point.number %in% c(1,2)])
samples <- samples[which(duplicated(samples))]
meta.sbs <- meta.data[meta.data$Patient_ID %in% samples & meta.data$Time.point.number %in% c(1,2),]
names.list <- meta.sbs$Sample_ID
meta.sbs <- meta.sbs[meta.sbs$Sample_ID %in% names.list,]
meta.sbs$Patient_ID <- as.character(meta.sbs$Patient_ID)
Point_1 <- as.character(meta.sbs$Sample_ID[meta.sbs$Time.point.number == 1])
Point_2 <- as.character(meta.sbs$Sample_ID[meta.sbs$Time.point.number == 2])
meta.data.sbs <- meta.data[meta.data$Sample_ID %in% c(Point_1, Point_2),]
write.table(meta.data.sbs, "meta.sbs.tsv" , quote = F)
metafast.output <- read.table("data/metafast/HP.metafast.txt", row.names = 1)
df.org <- read.csv("data/case.org.mpa", row.names = 1)
df.gen <- read.csv("data/case.gen.mpa", row.names = 1)
df.family <- read.table("data/case.family.mpa")
df.phyla <- read.table("data/case.phyla.mpa")
df.phyla <- df.phyla[rownames(df.phyla) %in% meta.data$sample_ID,]
# Import control data ##
control.family <- read.table("data/rus.control.family.mpa")
healthy.org <- read.table("data/healthy.org.txt")
healthy.fam <- read.table("data/healthy.fam.txt")
metafast.healthy <- read.table("data/metafast/healthy.metafast.txt", row.names = 1)
spec_num <- specnumber(df.org)
shannon.i <- diversity(df.org, index = "shannon")
simpson.i <- diversity(df.org, index = "simpson")
# Make data.frame
alpha.div <- data.frame(spec_num = spec_num,
shannon = shannon.i,
simpson = simpson.i)
alpha.div <- merge(cbind(rownames(alpha.div), alpha.div), meta.data[c(1,11)], by = 1)
alpha.div$point_number <- as.factor(alpha.div$point_number)
colnames(alpha.div)[1] <- "sampleID"
# Wilcoxon signed-rank paired test ##
index.names <- colnames(alpha.div[-c(1,5)])
alpha.div.sbs <- alpha.div[as.character(alpha.div$sampleID) %in% c(Point_1, Point_2),]
alpha.p <- NULL
for (k in index.names){
df.l <- alpha.div.sbs[c("point_number", k)]
first.point <- df.l[df.l$point_number == 1,]
second.point <- df.l[df.l$point_number == 2,]
w.alpha.div <- wilcox.test(first.point[,2],
second.point[,2], paired = T,
alternative = "greater")
StDev.f <- sd(first.point[,2])
StDev.s <- sd(second.point[,2])
alpha.p <- rbind(alpha.p, data.frame(index = k,
mean.1 = mean(first.point[,2]),
mean.2 = mean(second.point[,2]),
SD.1 = sd(first.point[,2]),
SD.2 = sd(second.point[,2]),
p.val = w.alpha.div$p.value))
}
write.table(alpha.p, 'output/alpha.diff.txt', quote=F, sep='\t', row.names = F)
workDir <- "/home/acari/Рабочий стол/HP_project/"
setwd(workDir)
# Import libraries and functions ##
source("src/functions.R")
source("src/functions_2.R")
source("src/functions_3.R")
set.seed(10)
# Set color pallete ##
my_palette <- colorRampPalette(rev(brewer.pal(11,"Spectral")))(200)
workDir <- "/home/acari/Рабочий стол/HP_project/"
setwd(workDir)
# Import libraries and functions ##
source("src/functions.R")
source("src/functions_2.R")
source("src/functions_3.R")
